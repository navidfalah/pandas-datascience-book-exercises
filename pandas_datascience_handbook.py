# -*- coding: utf-8 -*-
"""pandas datascience handbook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKCM0CoFdKFq0LajUdFZdJjj_atoEcdK
"""

import pandas

pandas.__version__

import pandas as pd

pd?

import numpy as np
import pandas as pd

data = pd.Series([0.25, 0.5, 0.75, 1.0])
data

data.dtype

data = pd.Series([0.25, 0.5, 0.75, 1.0],
                 index=['a', 'b', 'c', 'd'])
data

data.values

data.index

data[1]

data = pd.Series([0.25, 0.5, 0.75, 1.0],
 index=['a', 'b', 'c', 'd'])

data

data['b']

population_dict = {'California': 39538223, 'Texas': 29145505,
 'Florida': 21538187, 'New York': 20201249,
 'Pennsylvania': 13002700}

import pandas as pd

population = pd.Series(population_dict)

population

population['California':'Florida']

area_dict = {'California': 423967, 'Texas': 695662, 'Florida': 170312,
 'New York': 141297, 'Pennsylvania': 119280}

area = pd.Series(area_dict)
area

states = pd.DataFrame({'population': population,
 'area': area})

states

states.index

states.loc[:'Florida', :'area']

states.columns

population

type(population)

index = pd.Index([2, 3, 5, 7, 11])

index

index[1]

index[:2]

index.size, index.shape, index.ndim, index.dtype

import pandas as pd
data = pd.Series([0.25, 0.5, 0.75, 1.0],
index=['a', 'b', 'c', 'd'])

data

'a' in data

data.keys()

data.items()

data = pd.Series([0.25, 0.5, 0.75, 1.0],
index=['a', 'b', 'c', 'd'])

data[1]

data.iloc[1]

data.iloc[1:3]

data.loc['a':'c']

area = pd.Series({'California': 423967, 'Texas': 695662,
'Florida': 170312, 'New York': 141297,
'Pennsylvania': 119280})
pop = pd.Series({'California': 39538223, 'Texas': 29145505,
'Florida': 21538187, 'New York': 20201249,
'Pennsylvania': 13002700})
data = pd.DataFrame({'area':area, 'pop':pop})
data

data["area"]

data['densityt'] = data['pop'] / data['area']
data

data.values

data.T

data.iloc[:3, :2]

data.loc[data.density > 100, ['pop', 'density']]

data.iloc[2, 3] = 90
data

rng = np.random.RandomState(42)
ser = pd.Series(rng.randint(0, 10, 4))
ser

import pandas as pd
import numpy as np

area = pd.Series({'Alaska': 1723337, 'Texas': 695662,
'California': 423967}, name='area')
population = pd.Series({'California': 39538223, 'Texas': 29145505,
'Florida': 21538187}, name='population')

population/area

area.index.union(population.index)

A = pd.Series([2, 4, 6], index=[0, 1, 2])
B = pd.Series([1, 3, 5], index=[1, 2, 3])
A + B

A = pd.DataFrame(rng.randint(0, 20, (2, 2)),
columns=list('AB'))

A

B = pd.DataFrame(rng.randint(0, 10, (3, 3)),
columns=list('BAC'))

B

B+A

1 + np.nan

0 * np.nan

pd.Series([np.nan, 2, None, 4])

np.nan == np.nan

pd.Series([1, np.nan, 2, None, pd.NA], dtype='Int32')

data = pd.Series([1, np.nan, 'hello', None])

null_values = data.isnull()
values = data.notnull()

data[null_values]

data[values]

data.dropna()

data

df = pd.DataFrame([[1, np.nan, 2],
[2, 3, 5],
[np.nan, 4, 6]])
df

df.dropna()

df.dropna(axis='columns')

import pandas as pd
import numpy as np

index = [('California', 2010), ('California', 2020),
('New York', 2010), ('New York', 2020),
('Texas', 2010), ('Texas', 2020)]
populations = [37253956, 39538223,
19378102, 20201249,
25145561, 29145505]

pop = pd.Series(populations, index=index)
pop

index = pd.MultiIndex.from_tuples(index)
index

pop = pop.reindex(index)
pop

pop[:, 2010]

pop_df = pop.unstack()
pop_df

pop_df.stack()

pop_df = pd.DataFrame({'total': pop,
 'under18': [9284094, 8898092,
 4318033, 4181528,
 6879014, 7432474]})

pop_df

pop_df.unstack()

f_u18 = pop_df['under18'] / pop_df['total']
f_u18.unstack()

df = pd.DataFrame(np.random.rand(4, 2),
 index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]],
 columns=['data1', 'data2'])
 df

pop.index.names = ['state', 'year']
pop

index = pd.MultiIndex.from_product([[2013, 2014], [1, 2]],
names=['year', 'visit'])
columns = pd.MultiIndex.from_product([['Bob', 'Guido', 'Sue'],
['HR', 'Temp']],
names=['subject', 'type'])

data = np.round(np.random.randn(4, 6), 1)
data[:, ::2] *= 10
data += 37

health_data = pd.DataFrame(data, index=index, columns=columns)
 health_data

def make_df(cols, ind):
  data = {c: [str(c) + str(i) for i in ind]
  for c in cols}
  return pd.DataFrame(data, ind)

class display(object):
  """Display HTML representation of multiple objects"""
  template = """<div style="float: left; padding: 10px;">
  <p style='font-family:"Courier New", Courier, monospace'>{0}{1}
  """
  def __init__(self, *args):
    self.args = args

  def _repr_html_(self):
    return '\n'.join(self.template.format(a, eval(a)._repr_html_())
    for a in self.args)

  def __repr__(self):
    return '\n\n'.join(a + '\n' + repr(eval(a))
    for a in self.args)

x = [1, 2, 3]
y = [4, 5, 6]
z = [7, 8, 9]
np.concatenate([x, y, z])

x = make_df('AB', [0, 1])
y = make_df('AB', [2, 3])
y, x

import pandas as pd
import numpy as np

class display(object):
  """Display HTML representation of multiple objects"""
  template = """<div style="float: left; padding: 10px;">
  <p style='font-family:"Courier New", Courier, monospace'>{0}{1}
  """
def __init__(self, *args):
  self.args = args

def _repr_html_(self):
  return '\n'.join(self.template.format(a, eval(a)._repr_html_())
  for a in self.args)

def __repr__(self):
  return '\n\n'.join(a + '\n' + repr(eval(a))
  for a in self.args)

df1 = pd.DataFrame({'employee': ['Bob', 'Jake', 'Lisa', 'Sue'],
'group': ['Accounting', 'Engineering', 'Engineering', 'HR']})
df2 = pd.DataFrame({'employee': ['Lisa', 'Bob', 'Jake', 'Sue'],
'hire_date': [2004, 2008, 2012, 2014]})

df3 = pd.merge(df1, df2)
df3

import numpy as np
import pandas as pd

class display(object):
  """Display HTML representation of multiple objects"""
  template = """<div style="float: left; padding: 10px;">
  <p style='font-family:"Courier New", Courier, monospace'>{0}{1}
  """
  def __init__(self, *args):
    self.args = args

  def _repr_html_(self):
    return '\n'.join(self.template.format(a, eval(a)._repr_html_())
    for a in self.args)

  def __repr__(self):
    return '\n\n'.join(a + '\n' + repr(eval(a))
    for a in self.args)

import seaborn as sns
planets = sns.load_dataset('planets')
planets.shape

planets.head()

rng = np.random.RandomState(42)
ser = pd.Series(rng.rand(5))
ser

ser.sum()

ser.mean()

ser.max()

ser.min()

df = pd.DataFrame({'A': rng.rand(5),
'B': rng.rand(5)})
df

df.mean()

df.mean(axis=1)

df.quantile(0.5)

df.dropna().describe()

df.describe()

df.median()

new_df = df.values.reshape(10)

new_df.shape

new_df

df = pd.DataFrame(new_df)

df.std()

df.var()

df.prod()

df.sum()

df.describe()

df = pd.DataFrame({'key': ['A', 'B', 'C', 'A', 'B', 'C'],
 'data': range(6)}, columns=['key', 'data'])
df

df.groupby('key')

planets.groupby('method')

planets.groupby('method')['orbital_period']

planets.head()

planets.groupby('method')['orbital_period'].median()

for (method, group) in planets.groupby('method'):
  print("{0:30s} shape={1}".format(method, group.shape))

planets.groupby('method')['year'].describe()

planets.groupby('method')['year'].describe().unstack()

rng = np.random.RandomState(0)
df = pd.DataFrame({'key': ['A', 'B', 'C', 'A', 'B', 'C'],
 'data1': range(6),
 'data2': rng.randint(0, 10, 6)},
  columns=['key', 'data1', 'data2'])
df

df.groupby('key').aggregate(['min', np.median, max])

df.groupby('key').aggregate(['min', np.median, max])

def filter_func(x):
  return x['data2'].std() > 4

display('df', "df.groupby('key').std()", "df.groupby('key').filter(filter_func)")

df

import numpy as np

import pandas as pd
import seaborn as sns
titanic = sns.load_dataset('titanic')

titanic.head()

titanic.groupby('sex')[['survived']].aggregate('mean')

titanic.groupby(['sex', 'class'])[['survived']].aggregate('mean').unstack()

titanic.pivot_table('survived', index='sex', columns='class')



monte.str.slice(0, 3)